__author__ = 'Shannon Jaeger'
__version__ = '0.0.1'

from ImisFile import ImisFile
import argparse
import random
import shutil
import time

# TODO move from a csv file to a SqLite DB

def update_data(current_file_path=None, new_data_file_path=None, make_backup=True):
    """
    Merge copy of iMIS data with a new updated iMIS file.

    The new updated file is assumed to be the more up-to-date file, typically it
    will be a report generated by the Girl Guides iMIS system
    :param current_file_path: A properly constructed path to the file currently being
    used for iMIS number selection
    :param new_data_file_path: A properly constructed file path containing the new
    iMIS data
    :return: True if the current file has been updated, False otherwise
    """

    imis_file = ImisFile(current_file_path)
    imis_file.merge(new_data_file_path)


    #print("          ACTIVE MEMBERS")
    #print("--------------------------------------------------------")
    #for member in imis_file.active_member_list:
    #    print(str(member))

    #print("\n\n          INACTIVE MEMBERS")
    #print("--------------------------------------------------------")
    #for member in imis_file.inactive_member_list:
    #    print(str(member))


    # TODO verify the correctness of the new file
    if make_backup:
        shutil.copy(current_file_path, current_file_path+".bk")
    imis_file.write()

def select_numbers(file_path=None, how_many=3, make_backup=False, use_all=False):
    """
    Select a set of iMIS numbers from the given file.

    :param file_path:  The data file
    :param how_many:
    :param use_all:
    :return list: List of ImisFile.Member instances, the selected Members
    """

    # Read in the iMIS data
    imis_file = ImisFile(file_path)

    # Set-up the random number generator
    random.seed()
    random.randrange(0, len(imis_file.active_member_list))

    # Select the desired number of iMIS numbers
    selected_members = []
    while len(selected_members) < how_many:
        new_idx = random.randint(0, len(imis_file.active_member_list))
        member = imis_file.active_member_list[new_idx]
        if use_all or len(member.dates_selected) < 1:
            # We select this one.
            if len(member.dates_selected) < 1:
                member.dates_selected = time.strftime("%Y%m%d")
            else:
                member.dates_selected += ':' + time.strftime("%Y%m%d")
            selected_members.append(member)

    if make_backup:
        shutil.copy(file_path, file_path+".bk")
    imis_file.write()

    print('Selected Members')
    print('---------------------')
    for member in selected_members:
        print(str(member))

    return selected_members


def parser():
    """
    The main function of the whole program.  The arguments used when calling the
    application determines which mode it is run in as well as the files that are
    used for processing.

    Modes
    ----------
    1. iMIS random number selection:  Select a specified number of iMIS numbers
       from the provided iMIS data file at random
    2. iMIS data file update: Update the iMIS data file being used for number
       selection from an updated iMIS member list

    Command-line Arguments
    --------------------------
    -i <file_path> iMIS data file for number selection
    -n <integer> number of random iMIS numbers to be selected
    -r if listed then re-use iMIS numbers that have been selected before.
    -b Create a backup iMIS data file before writing

    -c <file_path> Current iMIS data file being used for number selection
    -m <file_path> New iMIS member list
    -b Create a backup iMIS data file before writing

    :return: None
    """
    parser = argparse.ArgumentParser(description='iMIS number selector and data file manager.')
    parser.add_argument('-v', '--version', action='version', version='%(prog)s '+str(__version__))
    parser.add_argument('-vb', '--verbose', action='store_true',
                        help='Run verbosely, display more processing details.')

    select_help = \
        """Select a set of active iMIS numbers\n
            -i --imis_file     File path to an iMIS data file in csv format.\n
            -n --num           Number of iMIS numbers to select.\n
            -r --reuse         Re-use iMIS numbers that have been selected before.\n
            -b --backup        Create a back-up of the iMIS data file before altering it.\n
        """
    subparsers = parser.add_subparsers()
    parser_select = subparsers.add_parser('select', help=select_help)
    parser_select.add_argument('-i', '--imis_file', dest='imis_file', required=True,
                               help='Fully specified file path to the iMIS data file in csv format.')
    parser_select.add_argument('-n', '--num', type=int, dest='num', default='10',
                               help='Number of iMIS numbers to select.')
    parser_select.add_argument('-r', '--reuse', action='store_true', dest='reuse',
                               help='If provided, re-use previously selected iMIS numbers.')
    parser_select.add_argument('-b', '--backup', action='store_true', dest='backup',
                               help='If provided, backup any altered iMIS data file.')


    parser_merge = subparsers.add_parser('merge', help='Merge two iMIS data files together into one.')
    parser_merge.add_argument('-i', '--imis_file', type=str, dest='imis_file', required=True,
                              help='File path to the iMIS data file in csv format.')
    parser_merge.add_argument('-m', '--members', type=str, dest='member_file', required=True,
                              help='File path to the iMIS Member List generate by iMIS in csv format.')
    parser_merge.add_argument('-b', '--backup', action='store_true', dest='backup',
                              help='If provided, backup any altered iMIS data file.')

    # Create a group to group the command-line arguments together
    #mutex_group = parser.add_mutually_exclusive_group()

    # # Group 1 is the arguments for selecting iMIS numbers
    # group1 = mutex_group.add_argument_group('select', 'Select a set of active iMIS numbers.')
    # group2 = mutex_group.add_argument_group('merge', 'Merge iMIS data files together.')
    #
    #
    # group1.add_argument('-i', dest='imis_file',
    #                     help='Fully specified file path to the iMIS data file in csv format.')
    # group1.add_argument('-n', type=int, dest='num', default='10',
    #                     help='Number of iMIS numbers to select.')
    # group1.add_argument('-r', action='store_true', dest='reuse',
    #                     help='If provided, re-use previously selected iMIS numbers.')
    # group1.add_argument('-b', action='store_true', dest='backup',
    #                     help='If provided, backup any altered iMIS data file.')

    # Group 2 is for merging data files
    #group2 = mutex_group.add_argument_group('merge')
    #mutex_group.add_argument('-c', type=str, dest='current_imis_file',
    #                    help='Fully specified file path to the iMIS data file in csv format.')
    # group2.add_argument('-m', type=str, dest='imis_member_file',
    #                     help='Fully specified file path to the iMIS Member List in csv format.')
    # group2.add_argument('-k', action='store_true', dest='backup2',
    #                     help='If provided, backup any altered iMIS data file.')

    return parser

def main(cli_args):
    try:
        the_parser = parser()
        parsed_args = the_parser.parse_args(cli_args)
    except Exception as e:
        print(str(e))
        return -1

    if hasattr(parsed_args, 'imis_file') and hasattr(parsed_args, 'num'):
        select_numbers(parsed_args.imis_file, parsed_args.num, parsed_args.backup, parsed_args.reuse)
    elif hasattr(parsed_args, 'imis_file') and hasattr(parsed_args, 'member_file'):
        update_data(parsed_args.imis_file, parsed_args.member_file, parsed_args.backup)
    else:
        the_parser.error("\"merged\" or \"select\" must be specified.")
        return -1


    return 0


if __name__ == '__main__':
    import sys
    sys.exit(main(sys.argv[1:]))